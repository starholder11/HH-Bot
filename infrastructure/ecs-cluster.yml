AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Cluster and Service for LanceDB'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where ECS will be deployed

  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnet IDs for Load Balancer

  PrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for ECS tasks

  EnvironmentName:
    Type: String
    Default: 'hh-bot-lancedb'
    Description: Environment name for resource naming

  ContainerImage:
    Type: String
    Default: 'your-account.dkr.ecr.region.amazonaws.com/lancedb-service:latest'
    Description: Docker image URI for LanceDB service

  OpenAIApiKeySecret:
    Type: String
    Description: ARN of the OpenAI API Key in Secrets Manager

  DesiredCount:
    Type: Number
    Default: 2
    Description: Desired number of ECS tasks

  TaskCpu:
    Type: Number
    Default: 2048
    Description: Task CPU units (1024 = 1 vCPU)

  TaskMemory:
    Type: Number
    Default: 8192
    Description: Task memory in MB

  DomainName:
    Type: String
    Default: ''
    Description: Domain name for SSL certificate (optional)

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${EnvironmentName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-cluster'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${EnvironmentName}-alb'
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnetIds
      SecurityGroups:
        - !ImportValue
            Fn::Sub: '${EnvironmentName}-alb-sg-id'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-alb'
        - Key: Environment
          Value: !Ref EnvironmentName

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${EnvironmentName}-tg'
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
        - Key: stickiness.enabled
          Value: 'false'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-tg'
        - Key: Environment
          Value: !Ref EnvironmentName

  # HTTP Listener
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${EnvironmentName}'
      RetentionInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-task-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIApiKeySecret
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:CreateFileSystem
                  - elasticfilesystem:CreateMountTarget
                  - elasticfilesystem:CreateAccessPoint
                  - elasticfilesystem:TagResource
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # ECS Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EnvironmentName}-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EFSClientWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientRootAccess
                Resource:
                  - !ImportValue
                      Fn::Sub: '${EnvironmentName}-efs-filesystem-id'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${EnvironmentName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: lancedb-service
          Image: !Ref ContainerImage
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '8000'
            - Name: LANCEDB_PATH
              Value: '/mnt/efs/lancedb'
            - Name: LOG_LEVEL
              Value: info
            - Name: EMBEDDING_MODEL
              Value: 'text-embedding-3-small'
          Secrets:
            - Name: OPENAI_API_KEY
              ValueFrom: !Ref OpenAIApiKeySecret
          MountPoints:
            - SourceVolume: efs-storage
              ContainerPath: /mnt/efs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'node healthcheck.js'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Volumes:
        - Name: efs-storage
          EFSVolumeConfiguration:
            FileSystemId: !ImportValue
              Fn::Sub: '${EnvironmentName}-efs-filesystem-id'
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !ImportValue
                Fn::Sub: '${EnvironmentName}-efs-access-point-id'
              IAM: ENABLED
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPListener
    Properties:
      ServiceName: !Sub '${EnvironmentName}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !ImportValue
                Fn::Sub: '${EnvironmentName}-ecs-sg-id'
          Subnets: !Ref PrivateSubnetIds
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: lancedb-service
          ContainerPort: 8000
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      HealthCheckGracePeriodSeconds: 120
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  # Auto Scaling Target
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join ["/", [service, !Ref ECSCluster, !GetAtt ECSService.Name]]
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy - CPU
  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${EnvironmentName}-cpu-scaling'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # Auto Scaling Policy - Memory
  ServiceScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${EnvironmentName}-memory-scaling'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 80.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Outputs:
  ClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${EnvironmentName}-cluster-name'

  ServiceName:
    Description: 'ECS Service Name'
    Value: !Ref ECSService
    Export:
      Name: !Sub '${EnvironmentName}-service-name'

  LoadBalancerDNS:
    Description: 'Load Balancer DNS Name'
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${EnvironmentName}-alb-dns'

  LoadBalancerHostedZoneId:
    Description: 'Load Balancer Hosted Zone ID'
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${EnvironmentName}-alb-zone-id'

  TaskDefinitionArn:
    Description: 'Task Definition ARN'
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${EnvironmentName}-task-definition-arn'

  ServiceEndpoint:
    Description: 'Service HTTP Endpoint'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
